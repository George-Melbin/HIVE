#!/usr/bin/env bash
# Usage: amd-oc log|stop|reset|nocolor|quiet


OC_LOG=/var/log/amd-oc.log
OC_TIMEOUT=120


[[ -f $RIG_CONF ]] && source $RIG_CONF
set -o pipefail

n=`gpu-detect AMD`
if [[ $n -eq 0 ]]; then
	#echo "No AMD cards detected"
	exit 0
fi

[[ "$1" != "nocolor" ]] && source colors

if [[ "$1" == "log" ]]; then
	[[ ! -f $OC_LOG ]] && echo "${YELLOW}$OC_LOG does not exist${NOCOLOR}" && exit 1
	cat $OC_LOG 2>/dev/null && echo -e "\n${GRAY}=== $OC_LOG === $( stat -c %y $OC_LOG )${NOCOLOR}"
	exit
fi

# do not run OC simultaneously
if [[ "$2" != "internal" ]]; then
	readarray -t pids < <( pgrep -f "timeout .*$OC_LOG" )
	for pid in "${pids[@]}"; do
		echo -e "${BYELLOW}Killing running amd-oc ($pid)${NOCOLOR}\n"
		# timeout process PID is equal to the PGID, so using it to kill process group
		kill -- -$pid
	done
fi

# just exit here
[[ "$1" == "stop" ]] && exit 0

[[ $MAINTENANCE == 2 ]] &&
	echo "${YELLOW}Maintenance mode enabled, exiting${NOCOLOR}" &&
	exit 1


# start main OC with timeout and logging
if [[ "$2" != "internal" ]]; then
	trap "echo -n $NOCOLOR" EXIT
	timeout --foreground -s9 $OC_TIMEOUT bash -c "set -o pipefail; amd-oc \"$1\" internal 2>&1 | tee $OC_LOG"
	exitcode=$?
	if [[ $exitcode -ne 0 && $exitcode -ne 143 ]]; then
		echo "${RED}ERROR: AMD OC failed${NOCOLOR}"
		[[ "$1" != "quiet" ]] && cat $OC_LOG | message error "AMD OC failed" payload > /dev/null
	fi
	exit $exitcode
fi


print_array() {
	local desc=$1
	local arr=($2)
	local align=10
	local pad=5
	printf "%-${align}s :" "$desc"
	for item in "${arr[@]}"
	do
		printf "%${pad}s" "$item"
	done
	printf "\n"
}


date
echo -e "\nDetected $n AMD cards\n"

if [[ "$1" == "reset" ]]; then
	echo -e "${YELLOW}Resetting OC to defaults${NOCOLOR}\n"
else
	[[ ! -f $AMD_OC_CONF ]] &&
		echo "${YELLOW}$AMD_OC_CONF does not exist, exiting${NOCOLOR}" &&
		exit 0
	source $AMD_OC_CONF
fi

if [[ ! -f $GPU_DETECT_JSON ]]; then
	gpu_detect_json=`gpu-detect listjson`
else
	gpu_detect_json=$(< $GPU_DETECT_JSON)
fi

source /hive/etc/gpu.ids

# use target temp for HW autofan if AMD is disabled in autofan settings
AMD_TARGET_TEMP=
[[ -f $AUTOFAN_CONF ]] && AMD_TARGET_TEMP=$( source $AUTOFAN_CONF && [[ $ENABLED == 1 && $NO_AMD == 1 ]] && echo "$TARGET_TEMP" )

gpu_names=`echo "$gpu_detect_json" | jq -r -c '.[] | select(.brand == "amd") | (.busid+"\""+.name+" "+.mem+"\"")'`

#readarray -t AMD_BUSIDS < <(lspci | grep -E "$GPU_DETECT_STRING" | grep "AMD" | grep -vE "$GPU_AMD_INTERNAL" | cut -d" " -f1)
readarray -t AMD_BUSIDS  < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "amd") | .value.busid' )

# this is needed for amdmemorytweak to work correct when internal AMD gpu is present
readarray -t AMD_ALL_BUSIDS < <(lspci | grep -E "$GPU_DETECT_STRING" | grep "AMD" | cut -d" " -f1)


n=${#AMD_BUSIDS[@]}
if [[ $n -eq 0 ]]; then
	echo -e "${RED}ERROR: No cards available for OC!\n${NOCOLOR}Please check BIOS settings, risers, connectors and PSU.\nUse OS image with suitable AMD driver version."
	exit 1
fi

# MAP OC to MB BUS ID
[[ -f "$BUSID_FILE" ]] && source $BUSID_FILE
# prefer AMD especially for mixed rigs
[[ ! -z "$BUSID_AMD" ]] && BUSID_MB="$BUSID_AMD"
if [[ ! -z "$BUSID_MB" ]]; then
	# add one more item to the end for not defined busid GPU
	BUSID_MB=($BUSID_MB "@")
	declare -A GPU_MAPPING
	for((idx=0; idx<${#BUSID_MB[@]}; idx++))
	do
		GPU_MAPPING["${BUSID_MB[$idx]}"]=$idx     #"
	done
	n=${#BUSID_MB[@]}
fi

PARAMS=(CORE_CLOCK CORE_VDDC CORE_STATE MEM_CLOCK MEM_STATE MVDD VDDCI SOCCLK SOCVDDMAX REF FAN PL)

# pad arrays
for param in "${PARAMS[@]}"; do
	[[ -z ${!param} ]] && continue
	arr=(${!param})
	for (( i=${#arr[@]}; i<$n; i++ )); do
		read "$param[$i]" < <( echo "${arr[-1]}" ) # use last element of initial array
	done
done

# Remap OC according to bus id
if [[ ! -z $BUSID_MB ]]; then
	# map params to temp array
	for param in "${PARAMS[@]}"; do
		arr="${param}[*]"
		declare -a "_$param"="( ${!arr} )"
		unset "${param}"
	done

	for (( i=0; i < ${#AMD_BUSIDS[@]}; i++ )); do
		busid=${AMD_BUSIDS[$i]/:00\.0}
		[[ ! -z $busid ]] && idx=${GPU_MAPPING[$busid]} || idx=
		[[ -z $idx ]] && idx=${GPU_MAPPING["@"]}
		#[[ $i -ne $idx ]] && echo "Mapping GPU $i settings to index $idx"
		# remap params
		for param in "${PARAMS[@]}"; do
			val="_$param[$idx]"
			read "$param[$i]" < <( echo "${!val}" )
		done
	done
	print_array "MB BUS ID" "${BUSID_MB[*]}"
else
	for param in "${PARAMS[@]}"; do
		arr="${param}[*]"
		declare -a "$param"="( ${!arr} )"
	done
fi

print_array "GPU BUS ID" "${AMD_BUSIDS[*]/:00\.0}"
for param in "${PARAMS[@]}"; do
	arr="${param}[*]"
	print_array "$param" "${!arr}"
done

echo "AGGRESSIVE = $AGGRESSIVE"


i=-1
card_idx=-1

for busid in "${AMD_ALL_BUSIDS[@]}"; do
	echo ""
	(( card_idx++ ))
	# skip internal gpu
	[[ ! "${AMD_BUSIDS[@]}" =~ $busid ]] && echo -e "${YELLOW}Skipping internal AMD GPU $busid${NOCOLOR}" && continue
	(( i++ ))

	[[ `echo /sys/bus/pci/devices/0000:$busid/drm/card*/` =~ \/card([0-9]+)\/ ]]
	cardno=${BASH_REMATCH[1]}
	[[ -z $cardno ]] && echo -e "${RED}ERROR: can not match card id for GPU $busid${NOCOLOR}" && continue
	[[ ! -f /sys/class/drm/card$cardno/device/pp_table ]] && echo -e "${RED}ERROR: no pp_table for GPU $busid${NOCOLOR}" && continue

	# 03:00.0"Radeon RX 570 8192 MB"
	[[ $gpu_names =~ $busid\"([^\"]+) ]] &&
		name="${RED}${BASH_REMATCH[1]}${NOCOLOR} #$cardno" ||
		name=/sys/class/drm/card$cardno

	#echo "#$i  idx$card_idx  card$cardno  $busid"

	echo -e "${YELLOW}===${NOCOLOR} GPU ${CYAN}$i${NOCOLOR}, ${PURPLE}$busid${NOCOLOR} $name ${YELLOW}=== `date +"%T"`${NOCOLOR}"
	savedpp=/tmp/pp_tables/card$cardno/pp_table

	[[ ! -f $savedpp ]] && echo -e "${RED}ERROR: $savedpp not found, try to reboot${NOCOLOR}" && continue

	VEGAS_COUNT=$( lspci -vnns $busid | grep VGA -A 2 | grep AMD -A 2 | grep Vega -A 2 | grep -v "Vega 8" | wc -l )
	NAVI_COUNT=$( lspci -vnns $busid | grep -Ei "$GPU_NAVI" | wc -l )
	IS_VEGA10=$( lspci -vnns $busid | grep -Ei "$GPU_VEGA10" | wc -l )
	IS_VEGA20=$( lspci -vnns $busid | grep -Ei "$GPU_VEGA20" | wc -l )

	if [[ $VEGAS_COUNT -eq 0 && $NAVI_COUNT -eq 0 ]]; then
		source /hive/sbin/amd-oc.polaris.sh
	elif [[ $NAVI_COUNT -gt 0 || $IS_VEGA20 -gt 0 ]]; then
		source /hive/sbin/amd-oc.navi.sh
	#elif [[ $IS_VEGA10 -gt 0 && $AGGRESSIVE == 1 ]]; then
	#	source /hive/sbin/amd-oc.vega.aggressive.sh
	#elif [[ $IS_VEGA10 -gt 0 ]]; then
	else
		source /hive/sbin/amd-oc.vega.sh
	fi

done

echo ""

exit 0
